package com.tourism.demo.controller;

import java.util.List;
import javax.validation.Valid;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.http.HttpStatus;
import org.springframework.http.ResponseEntity;
import org.springframework.web.bind.annotation.CrossOrigin;
import org.springframework.web.bind.annotation.DeleteMapping;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.PostMapping;
import org.springframework.web.bind.annotation.PutMapping;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RestController;

import com.tourism.demo.dao.UserRepository;
import com.tourism.demo.entity.Booking;
import com.tourism.demo.entity.Hotel;
import com.tourism.demo.entity.Place;
import com.tourism.demo.entity.Ticket;
import com.tourism.demo.entity.TourPackage;
import com.tourism.demo.entity.Transport;
import com.tourism.demo.entity.TravelAgent;
import com.tourism.demo.entity.User;
import com.tourism.demo.service.BookingService;
import com.tourism.demo.service.HotelService;
import com.tourism.demo.service.TourPackageService;
import com.tourism.demo.service.PlaceService;
import com.tourism.demo.service.TicketService;
import com.tourism.demo.service.TransportService;
import com.tourism.demo.service.TravelAgentService;
import com.tourism.demo.service.UserService;

@RestController
@CrossOrigin(origins = "http://localhost:4200")
@RequestMapping("/api/admin")
public class AdminController {
	
	
	@Autowired
	private UserRepository dao;
	
	 @Autowired UserService uservice;
	 @Autowired BookingService bservice;
	 @Autowired HotelService hservice;
	 @Autowired PlaceService plservice;
	 @Autowired TourPackageService paservice;
	 @Autowired TicketService tservice;
	 @Autowired TravelAgentService trservice;
	 @Autowired TransportService tsservice;
	 
	 
	//hotel 
	@PostMapping("/addHotel")
	public ResponseEntity<Hotel> addHotel(@Valid @RequestBody Hotel h) {
		return new ResponseEntity<Hotel>(hservice.addHotel(h), HttpStatus.CREATED);
	}
	@GetMapping("/list")
	public List<Hotel> getAllHotel() {
		return hservice.getAllHotel();
	}

	@GetMapping("find/{Hotel_id}")
	public ResponseEntity<Hotel> getHotelById(@PathVariable("hotel_id") long Hotel_id) {
		return new ResponseEntity<Hotel>(hservice.getHotelById(Hotel_id), HttpStatus.OK);
	}
	@PutMapping("update")
	public ResponseEntity<Hotel> updateHotel(@Valid  @RequestBody Hotel h) {
		return new ResponseEntity<Hotel>(hservice.updateHotel(h),HttpStatus.OK);
	}

	@DeleteMapping("delete/{Hotel_id}")
	public ResponseEntity<Boolean> deleteHotel(@PathVariable("hotel_id") long Hotel_id) {
		hservice.deleteHotel(Hotel_id);
		boolean flag = true;
		return new ResponseEntity<Boolean>(flag, HttpStatus.OK);

	}
		
	
	//booking	
	
	
	@GetMapping("/list_b")
		public List<Booking> getAllBooking() {
			return bservice.getAllBooking();
		}

	@GetMapping("find/{booking_id}")
		public ResponseEntity<Booking> getBookingById(@PathVariable("Booking_id") long Booking_id) {
			return new ResponseEntity<Booking>(bservice.getBookingById(Booking_id), HttpStatus.OK);
		}
	
	@PutMapping("update_b")
		public ResponseEntity<Booking> updateBooking(@Valid  @RequestBody Booking b) {
			return new ResponseEntity<Booking>(bservice.updateBooking(b),HttpStatus.OK);
		}

	@DeleteMapping("delete/{booking_id}")
		public ResponseEntity<Boolean> deleteBooking(@PathVariable("Booking_id") long Booking_id) {
			bservice.deleteBooking(Booking_id);
			boolean flag = true;
			return new ResponseEntity<Boolean>(flag, HttpStatus.OK);	
			
	}
	
	

	//place	

	@PostMapping("/addPlace")
	public ResponseEntity<Place> addPlace(@Valid @RequestBody Place p) {

		return new ResponseEntity<Place>(plservice.addPlace(p), HttpStatus.CREATED);
	}
	
	@GetMapping("/list_pl")
	public List<Place> getAllPlace() {
		return plservice.getAllPlace();
	}

	@GetMapping("find/{Place_id}")
	public ResponseEntity<Place> getPlaceById(@PathVariable("place_id") long Place_id) {
		return new ResponseEntity<Place>(plservice.getPlaceById(Place_id), HttpStatus.OK);
	}
	@PutMapping("update_pl")
	public ResponseEntity<Place> updatePlace(@Valid  @RequestBody Place p) {
		return new ResponseEntity<Place>(plservice.updatePlace(p),HttpStatus.OK);
	}

	@DeleteMapping("delete/{Place_id}")
	public ResponseEntity<Boolean> deletePlace(@PathVariable("place_id") long Place_id) {
		plservice.deletePlace(Place_id);
		boolean flag = true;
		return new ResponseEntity<Boolean>(flag, HttpStatus.OK);

	}
	
	
	//Package
	@PostMapping("/addPackage")
	public ResponseEntity<TourPackage> addTourPackage(@Valid @RequestBody TourPackage pa) {
		return new ResponseEntity<TourPackage>(paservice.addTourPackage(pa), HttpStatus.CREATED);
	}
	@GetMapping("/list_pa")
	public List<TourPackage> getAllPackage() {
		return paservice.getAllPackage();
	}

	@GetMapping("find/{Package_id}")
	public ResponseEntity<TourPackage> getProductById(@PathVariable("Package_id") long package_id) {
		return new ResponseEntity<TourPackage>(paservice.getPackageById(package_id), HttpStatus.OK);
	}
	@PutMapping("update_pa")
	public ResponseEntity<TourPackage> updatePackage(@Valid  @RequestBody TourPackage pa) {
		return new ResponseEntity<TourPackage>(paservice.updateTourPackage(pa),HttpStatus.OK);
	}

	@DeleteMapping("delete/{Package_id}")
	public ResponseEntity<Boolean> deleteTourPackage(@PathVariable("Package_id") long Package_id) {
		paservice.deleteTourPackage(Package_id);
		boolean flag = true;
		return new ResponseEntity<Boolean>(flag, HttpStatus.OK);

	}
	
	
	//Ticket
	
	
	
	@PostMapping("/addTicket")
	public ResponseEntity<Ticket> addTicket(@Valid @RequestBody Ticket t) {

		return new ResponseEntity<Ticket>(tservice.addTicket(t), HttpStatus.CREATED);
	}
	
	@GetMapping("/list_t")
	public List<Ticket> getAllTicket() {
		return tservice.getAllTicket();
	}

	@GetMapping("find/{Ticket_id}")
	public ResponseEntity<Ticket> getTicketById(@PathVariable("Ticket_id") long Ticket_id) {
		return new ResponseEntity<Ticket>(tservice.getTicketById(Ticket_id), HttpStatus.OK);
	}
	@PutMapping("update_t")
	public ResponseEntity<Ticket> updateTicket(@Valid  @RequestBody Ticket t) {
		return new ResponseEntity<Ticket>(tservice.updateTicket(t),HttpStatus.OK);
	}

	@DeleteMapping("delete/{Ticket_id}")
	public ResponseEntity<Boolean> deleteTicket(@PathVariable("Ticket_id") long Ticket_id) {
		tservice.deleteTicket(Ticket_id);
		boolean flag = true;
		return new ResponseEntity<Boolean>(flag, HttpStatus.OK);
	}
	
	
	
	//TravelAgent
	
	
	
	@PostMapping("/addTravelAgent")
	public ResponseEntity<TravelAgent> addTicketAgent(@Valid @RequestBody TravelAgent tr) {
		return new ResponseEntity<TravelAgent>(trservice.addTravelAgent(tr), HttpStatus.CREATED);
	}
	@GetMapping("/list_tr")
	public List<TravelAgent> getAllTravelAgent() {
		return trservice.getAllTravelAgent();
	}

	@GetMapping("find/{travelAgent_id}")
	public ResponseEntity<TravelAgent> getTravelAgentById(@PathVariable("TravelAgent_id") long TravelAgent_id) {
		return new ResponseEntity<TravelAgent>(trservice.getTravelAgentById(TravelAgent_id), HttpStatus.OK);
	}
	@PutMapping("update_tr")
	public ResponseEntity<TravelAgent> updateTravelAgent(@Valid  @RequestBody TravelAgent tr) {
		return new ResponseEntity<TravelAgent>(trservice.updateTravelAgent(tr),HttpStatus.OK);
	}

	@DeleteMapping("delete/{TravelAgent_id}")
	public ResponseEntity<Boolean> deleteTravelAgent(@PathVariable("TravelAgent_id") long TravelAgent_id) {
		trservice.deleteTravelAgent(TravelAgent_id);
		boolean flag = true;
		return new ResponseEntity<Boolean>(flag, HttpStatus.OK);

	}
		
	//Transport
	 
		@PostMapping("/addTransport")
		public ResponseEntity<Transport> addTransport(@Valid @RequestBody Transport ts) {

			return new ResponseEntity<Transport>(tsservice.addTransport(ts), HttpStatus.CREATED);
		}
		@GetMapping("/list_ts")
		public List<Transport> getAllTransport() {
			return tsservice.getAllTransport();
		}

		@GetMapping("find/{Transport_id}")
		public ResponseEntity<Transport> getTransportById(@PathVariable("Transport_id") long Transport_id) {
			return new ResponseEntity<Transport>(tsservice.getTransportById(Transport_id), HttpStatus.OK);
		}
		@PutMapping("update_ts")
		public ResponseEntity<Transport> updateTransport(@Valid  @RequestBody Transport ts) {
			return new ResponseEntity<Transport>(tsservice.updateTransport(ts),HttpStatus.OK);
		}

		@DeleteMapping("delete/{Transport_id}")
		public ResponseEntity<Boolean> deleteTransport(@PathVariable("Transport_id") long Transport_id) {
			tsservice.deleteTransport(Transport_id);
			boolean flag = true;
			return new ResponseEntity<Boolean>(flag, HttpStatus.OK);

		}
			
		
		
		//User
		@GetMapping("/list_u")
		public List<User> getAllUsers() {
			return uservice.getAlluser();
		}
		
		@PostMapping("/login")
		public ResponseEntity<?> loginUser(@RequestBody User  userData) {
			User user = dao.findByname( userData.getName());

			if (user.getPassword().equals( userData.getPassword())) {
				User senduser=new User();
				senduser.setUser_id(user.getUser_id());
				senduser.setName(user.getName());
				senduser.setGender(user.getGender());
				senduser.setEmail(user.getEmail());	
				senduser.setPhoneNumber(user.getPhoneNumber());
				senduser.setDistrict(user.getDistrict());
				senduser.setZip(user.getZip());
				senduser.setState(user.getState());
				
				return ResponseEntity.ok(senduser);
			} else {
				return (ResponseEntity<?>) ResponseEntity.internalServerError();
			}
		}
		
		
		
		@PostMapping("/saveuser")
		public ResponseEntity<?> saveUser(@RequestBody User user) {
			User u=dao.findByname(user.getName());
			if(u!=null) {
				return (ResponseEntity<?>) ResponseEntity.internalServerError();	
			}
			else {
				dao.save(user);
				return ResponseEntity.ok(user);
			}
		}

		@GetMapping("user/{User_id}")
		public ResponseEntity<User> getuserById(@PathVariable("User_id") int User_id) {
			return new ResponseEntity<User>(uservice.getuserById(User_id), HttpStatus.OK);
		}

}