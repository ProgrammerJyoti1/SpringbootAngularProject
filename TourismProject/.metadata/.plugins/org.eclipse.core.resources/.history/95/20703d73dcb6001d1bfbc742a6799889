package com.tourism.entity;

import java.time.LocalDate;
import java.util.Date;

import java.util.Set;
import org.hibernate.validator.constraints.Length;
import jakarta.persistence.CascadeType;
import jakarta.persistence.Column;
//import java.util.Date;
import jakarta.persistence.Entity;
import jakarta.persistence.EnumType;
import jakarta.persistence.Enumerated;
import jakarta.persistence.FetchType;
import jakarta.persistence.GeneratedValue;
import jakarta.persistence.GenerationType;
import jakarta.persistence.Id;
import jakarta.persistence.JoinColumn;
import jakarta.persistence.OneToMany;
import jakarta.persistence.OneToOne;
import jakarta.persistence.SequenceGenerator;
import jakarta.validation.constraints.Email;
import jakarta.validation.constraints.NotBlank;
import jakarta.validation.constraints.NotNull;
import jakarta.validation.constraints.Past;
import jakarta.validation.constraints.Pattern;


@Entity
@SequenceGenerator(name = "generator1", sequenceName = "gen1", initialValue = 1000)
public class User {
	
	@Id
	@GeneratedValue(strategy = GenerationType.SEQUENCE)
	protected Long user_id;		

	@Column(name = "name")
	@NotBlank(message = "Name is mandatory")
	protected String name;	
	
	@Column
	@NotNull
	@Past
	private Date dob;
	
	@Column(name = "phoneNumber",length = 10, unique = true)
	private String phoneNumber;
	
	@Enumerated(EnumType.STRING)
	@Column(name = "gender")
	private Gender1 gender;

	@Column(name = "birth_of_date")
	private LocalDate birthOfDate;

	
	@Column(unique = true)
	@NotNull
	@Email
	protected String email;
		
	@Column
	@NotNull
	private String password;
	
	@Column(name = "street")
	@NotNull
	private String street;
	
	@Column(name = "district")
	@NotNull
	private String district;
	

	@Column(name = "state")
	@NotNull
	@Length(min = 2, max = 10)
	private String state;
	
	@Column(name = "zip" , length = 6)
	@NotNull
	@Pattern(regexp="(^$|[0-9]{6})")
	private int zip;

	public User() {
		super();
		// TODO Auto-generated constructor stub
	}

	@OneToMany(
			cascade = CascadeType.ALL,
			mappedBy = "user-id",
			fetch = FetchType.EAGER
	)
	Set<Booking> booking;
	
	public User(Long user_id, @NotBlank(message = "Name is mandatory") String name, @NotNull @Past Date dob,
			String phoneNumber, Gender1 gender, LocalDate birthOfDate, Set<Booking> bookings,
			@NotNull @Email String email, @NotNull String password, @NotNull String street, @NotNull String district,
			@NotNull @Length(min = 2, max = 10) String state, @NotNull @Pattern(regexp = "(^$|[0-9]{6})") int zip) {
		super();
		this.user_id = user_id;
		this.name = name;
		this.dob = dob;
		this.phoneNumber = phoneNumber;
		this.gender = gender;
		this.birthOfDate = birthOfDate;
		this.bookings = bookings;
		this.email = email;
		this.password = password;
		this.street = street;
		this.district = district;
		this.state = state;
		this.zip = zip;
	}

	@OneToMany(
			cascade = CascadeType.ALL,
			mappedBy = "user_id",
			fetch = FetchType.EAGER
	)
	Set<Booking> bookings;
	
	

}
