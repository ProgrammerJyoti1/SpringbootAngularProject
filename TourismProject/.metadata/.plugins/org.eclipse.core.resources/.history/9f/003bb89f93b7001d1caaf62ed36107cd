package com.tourism.demo.controller;

import java.util.List;

import javax.validation.Valid;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.http.HttpStatus;
import org.springframework.http.ResponseEntity;
import org.springframework.validation.annotation.Validated;
import org.springframework.web.bind.annotation.CrossOrigin;
import org.springframework.web.bind.annotation.DeleteMapping;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.PostMapping;
import org.springframework.web.bind.annotation.PutMapping;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RestController;
import com.tourism.demo.entity.Booking;
import com.tourism.demo.entity.Hotel;
import com.tourism.demo.entity.Place;
import com.tourism.demo.entity.Ticket;
import com.tourism.demo.entity.TravelAgent;
import com.tourism.demo.service.BookingService;
import com.tourism.demo.service.HotelService;
import com.tourism.demo.service.PackageService;
import com.tourism.demo.service.PlaceService;
import com.tourism.demo.service.TicketService;
import com.tourism.demo.service.TravelAgentService;
import com.tourism.demo.service.UserService;


@RestController
@CrossOrigin(origins = "http://localhost:4200")
@RequestMapping("/api/admin")

public class AdminController {
	
	 @Autowired UserService uservice;
	 @Autowired BookingService bservice;
	 @Autowired HotelService hservice;
	 @Autowired PlaceService plservice;
	 @Autowired PackageService paservice;
	 @Autowired TicketService tservice;
	 @Autowired TravelAgentService trservice;
	 @Autowired TransportService tsservice;
	 
	 
	//hotel 
	@PostMapping("/addHotel")
	public ResponseEntity<Hotel> addHotel(@Valid @RequestBody Hotel h) {

		return new ResponseEntity<Hotel>(hservice.addHotel(h), HttpStatus.CREATED);
	}
	@GetMapping("/list")
	public List<Hotel> getAllHotel() {
		return hservice.getAllHotel();
	}

	@GetMapping("find/{hotel_id}")
	public ResponseEntity<Hotel> getHotelById(@PathVariable("hotel_id") long hotel_id) {
		return new ResponseEntity<Hotel>(hservice.getHotelById(hotel_id), HttpStatus.OK);
	}
	@PutMapping("update")
	public ResponseEntity<Hotel> updateHotel(@Valid  @RequestBody Hotel h) {
		return new ResponseEntity<Hotel>(hservice.updateHotel(h),HttpStatus.OK);
	}

	@DeleteMapping("delete/{hotel_id}")
	public ResponseEntity<Boolean> deleteHotel(@PathVariable("hotel_id") long hotel_id) {
		hservice.deleteHotel(hotel_id);
		boolean flag = true;
		return new ResponseEntity<Boolean>(flag, HttpStatus.OK);

	}
		
	//booking	
	
	@GetMapping("/list")
		public List<Booking> getAllBooking() {
			return bservice.getAllBooking();
		}

	@GetMapping("find/{booking_id}")
		public ResponseEntity<Booking> getBookingById(@PathVariable("booking_id") long booking_id) {
			return new ResponseEntity<Booking>(bservice.getBookingById(booking_id), HttpStatus.OK);
		}
	
	@PutMapping("update")
		public ResponseEntity<Booking> updateBooking(@Valid  @RequestBody Booking b) {
			return new ResponseEntity<Booking>(bservice.updateBooking(b),HttpStatus.OK);
		}

	@DeleteMapping("delete/{booking_id}")
		public ResponseEntity<Boolean> deleteBooking(@PathVariable("booking_id") long booking_id) {
			bservice.deleteBooking(booking_id);
			boolean flag = true;
			return new ResponseEntity<Boolean>(flag, HttpStatus.OK);	
			
	}
	
	//place	

	@PostMapping("/addPlace")
	public ResponseEntity<Place> addPlace(@Valid @RequestBody Place p) {

		return new ResponseEntity<Place>(plservice.addPlace(p), HttpStatus.CREATED);
	}
	
	@GetMapping("/list")
	public List<Place> getAllPlace() {
		return plservice.getAllPlace();
	}

	@GetMapping("find/{place_id}")
	public ResponseEntity<Place> getPlaceById(@PathVariable("place_id") long place_id) {
		return new ResponseEntity<Place>(plservice.getPlaceById(place_id), HttpStatus.OK);
	}
	@PutMapping("update")
	public ResponseEntity<Place> updatePlace(@Valid  @RequestBody Place p) {
		return new ResponseEntity<Place>(plservice.updatePlace(p),HttpStatus.OK);
	}

	@DeleteMapping("delete/{place_id}")
	public ResponseEntity<Boolean> deletePlace(@PathVariable("place_id") long place_id) {
		plservice.deletePlace(place_id);
		boolean flag = true;
		return new ResponseEntity<Boolean>(flag, HttpStatus.OK);

	}
	
	
	//Package
	@PostMapping("/addPackage")
	public ResponseEntity<Package> addPackage(@Valid @RequestBody Package h) {
		return new ResponseEntity<Package>(paservice.addPackage(h), HttpStatus.CREATED);
	}
	@GetMapping("/list")
	public List<Package> getAllPackage() {
		return paservice.getAllPackage();
	}

	@GetMapping("find/{package_id}")
	public ResponseEntity<Package> getProductById(@PathVariable("Package_id") long package_id) {
		return new ResponseEntity<Package>(paservice.getPackageById(package_id), HttpStatus.OK);
	}
	@PutMapping("update")
	public ResponseEntity<Package> updatePackage(@Valid  @RequestBody Package h) {
		return new ResponseEntity<Package>(paservice.updatePackage(h),HttpStatus.OK);
	}

	@DeleteMapping("delete/{package_id}")
	public ResponseEntity<Boolean> deletePackage(@PathVariable("Package_id") long package_id) {
		paservice.deletePackage(package_id);
		boolean flag = true;
		return new ResponseEntity<Boolean>(flag, HttpStatus.OK);

	}
	
	
	//Ticket
	
	
	
	@PostMapping("/addTicket")
	public ResponseEntity<Ticket> addTicket(@Valid @RequestBody Ticket t) {

		return new ResponseEntity<Ticket>(tservice.addTicket(t), HttpStatus.CREATED);
	}
	
	@GetMapping("/list")
	public List<Ticket> getAllTicket() {
		return tservice.getAllTicket();
	}

	@GetMapping("find/{ticket_id}")
	public ResponseEntity<Ticket> getTicketById(@PathVariable("ticket_id") long ticket_id) {
		return new ResponseEntity<Ticket>(tservice.getTicketById(ticket_id), HttpStatus.OK);
	}
	@PutMapping("update")
	public ResponseEntity<Ticket> updateTicket(@Valid  @RequestBody Ticket t) {
		return new ResponseEntity<Ticket>(tservice.updateTicket(t),HttpStatus.OK);
	}

	@DeleteMapping("delete/{ticket_id}")
	public ResponseEntity<Boolean> deleteTicket(@PathVariable("ticket_id") long ticket_id) {
		tservice.deleteTicket(ticket_id);
		boolean flag = true;
		return new ResponseEntity<Boolean>(flag, HttpStatus.OK);
	}
	
	
	
	//TravelAgent
	
	
	
	@PostMapping("/addTravelAgent")
	public ResponseEntity<TravelAgent> addTicketAgent(@Valid @RequestBody TravelAgent tr) {
		return new ResponseEntity<TravelAgent>(trservice.addTravelAgent(tr), HttpStatus.CREATED);
	}
	@GetMapping("/list")
	public List<TravelAgent> getAllTravelAgent() {
		return trservice.getAllTravelAgent();
	}

	@GetMapping("find/{travelAgent_id}")
	public ResponseEntity<TravelAgent> getTravelAgentById(@PathVariable("travelAgent_id") long travelAgent_id) {
		return new ResponseEntity<TravelAgent>(trservice.getTravelAgentById(travelAgent_id), HttpStatus.OK);
	}
	@PutMapping("update")
	public ResponseEntity<TravelAgent> updateTravelAgent(@Valid  @RequestBody TravelAgent tr) {
		return new ResponseEntity<TravelAgent>(trservice.updateTravelAgent(tr),HttpStatus.OK);
	}

	@DeleteMapping("delete/{travelAgent_id}")
	public ResponseEntity<Boolean> deleteTravelAgent(@PathVariable("travelAgent_id") long travelAgent_id) {
		trservice.deleteTravelAgent(travelAgent_id);
		boolean flag = true;
		return new ResponseEntity<Boolean>(flag, HttpStatus.OK);

	}
		
	//Transport
	 
		@PostMapping("/addHotel")
		public ResponseEntity<Hotel> addHotel(@Valid @RequestBody Hotel h) {

			return new ResponseEntity<Hotel>(hservice.addHotel(h), HttpStatus.CREATED);
		}
		@GetMapping("/list")
		public List<Hotel> getAllHotel() {
			return hservice.getAllHotel();
		}

		@GetMapping("find/{hotel_id}")
		public ResponseEntity<Hotel> getHotelById(@PathVariable("hotel_id") long hotel_id) {
			return new ResponseEntity<Hotel>(hservice.getHotelById(hotel_id), HttpStatus.OK);
		}
		@PutMapping("update")
		public ResponseEntity<Hotel> updateHotel(@Valid  @RequestBody Hotel h) {
			return new ResponseEntity<Hotel>(hservice.updateHotel(h),HttpStatus.OK);
		}

		@DeleteMapping("delete/{hotel_id}")
		public ResponseEntity<Boolean> deleteHotel(@PathVariable("hotel_id") long hotel_id) {
			hservice.deleteHotel(hotel_id);
			boolean flag = true;
			return new ResponseEntity<Boolean>(flag, HttpStatus.OK);

		}
			
		
		
		//User
		@PostMapping("/addHotel")
		public ResponseEntity<Hotel> addHotel(@Valid @RequestBody Hotel h) {

			return new ResponseEntity<Hotel>(hservice.addHotel(h), HttpStatus.CREATED);
		}
		@GetMapping("/list")
		public List<Hotel> getAllHotel() {
			return hservice.getAllHotel();
		}

		@GetMapping("find/{hotel_id}")
		public ResponseEntity<Hotel> getHotelById(@PathVariable("hotel_id") long hotel_id) {
			return new ResponseEntity<Hotel>(hservice.getHotelById(hotel_id), HttpStatus.OK);
		}
		@PutMapping("update")
		public ResponseEntity<Hotel> updateHotel(@Valid  @RequestBody Hotel h) {
			return new ResponseEntity<Hotel>(hservice.updateHotel(h),HttpStatus.OK);
		}

		@DeleteMapping("delete/{hotel_id}")
		public ResponseEntity<Boolean> deleteHotel(@PathVariable("hotel_id") long hotel_id) {
			hservice.deleteHotel(hotel_id);
			boolean flag = true;
			return new ResponseEntity<Boolean>(flag, HttpStatus.OK);

		}
			
		
}